{"version":3,"file":"main.a33c07fb2a43c48348aa.bundle.js","sources":["webpack:///./components/ReactCountDown.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface RemainingTimePointsInterface {\n  point: number;\n  callback: () => void;\n}\n\nexport interface CountDownProps {\n  time: number;\n  onEnd: () => void;\n  remainingTimePoints: Array<RemainingTimePointsInterface>;\n}\n\nexport interface CountDownState {\n  time: number;\n}\n\n/**\n * 倒计时组件\n */\nexport default class ReactCountDown extends React.Component<\n  CountDownProps,\n  CountDownState\n> {\n  static propTypes = {\n    /**\n     * 剩余时间（秒）\n     */\n    time: PropTypes.number.isRequired,\n\n    /**\n     * 时间为 0 时的回调函数\n     */\n    onEnd: PropTypes.func,\n\n    /**\n     * 剩余时间点回调\n     * 默认：-\n     * [{\n     *   point: 10 * 60, // 距离倒计时 10 分钟\n     *   callback: () => alert('距离结束还有 10 分钟') // 在距离结束还有 10 分钟时的回调函数\n     * }]\n     */\n    remainingTimePoints: PropTypes.shape({\n      point: PropTypes.number,\n      callback: PropTypes.func\n    })\n  };\n\n  static defaultTypes = {};\n\n  constructor(props) {\n    super(props);\n    const { time } = props;\n\n    this.totalTime = time;\n    this.remainTime = time;\n\n    this.state = {\n      time\n    };\n  }\n\n  private timer: any;\n\n  totalTime: number; // 总时间\n  useTime: number = 0; // 用时（单位：秒）\n  remainTime: number; // 剩余时间\n\n  componentDidMount = () => {\n    this.setTime();\n  };\n\n  componentWillUnmount = () => {\n    clearTimeout(this.timer);\n  };\n\n  setTime = () => {\n    this.timer = setTimeout(() => {\n      const time = this.state.time - 1;\n      if (time === 0) {\n        this.setState({ time });\n        this.props.onEnd && this.props.onEnd();\n        return clearTimeout(this.timer);\n      }\n      const { remainingTimePoints } = this.props;\n\n      // 在某个时间点\n      remainingTimePoints &&\n        remainingTimePoints.forEach(timePoint => {\n          if (timePoint.point === time) {\n            timePoint.callback && timePoint.callback();\n          }\n        });\n      // 剩余时间\n      this.remainTime = time;\n      // 用时\n      this.useTime = this.totalTime - this.remainTime;\n\n      this.setState({ time: time });\n\n      this.setTime();\n    }, 1000);\n  };\n\n  render() {\n    const { time } = this.state;\n    let m: number | string = Math.floor(time / 60);\n    let s: number | string = time % 60;\n\n    m = m < 10 ? '0' + m : m + '';\n    s = s < 10 ? '0' + s : s + '';\n\n    return (\n      <div>\n        <span>{m}</span>\n        <span>:</span>\n        <span>{s}</span>\n      </div>\n    );\n  }\n}\ntry {\n    // @ts-ignore\n    ReactCountDown.displayName = \"ReactCountDown\";\n    // @ts-ignore\n    ReactCountDown.__docgenInfo = { \"description\": \"\\u5012\\u8BA1\\u65F6\\u7EC4\\u4EF6\", \"displayName\": \"ReactCountDown\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"components/ReactCountDown.tsx#ReactCountDown\"] = { docgenInfo: ReactCountDown.__docgenInfo, name: \"ReactCountDown\", path: \"components/ReactCountDown.tsx#ReactCountDown\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAqBA","sourceRoot":""}